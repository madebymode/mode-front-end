@use "sass:list";
@use "sass:map";

/**
 * Generic property utility.
 * @param  {String}  $property
 * @param  {String}  $alias
 * @param  {String}  $value
 * @param  {String}  $at-breakpoint
 */
@mixin u-property($property, $alias, $value, $at-breakpoint: null) {
  $class-name: 'u-#{$property}-#{$alias}';
  @include breakpoints($class-name, $at-breakpoint) {
    #{$property}: #{$value};
  }
}

// Examples:

// @include u-property('flex-wrap', 'nowrap', 'nowrap', 'sm');

/**
 * Directional property utility.
 * Valid aliases: `top`, `gray`, `gray-3`, `top-gray`, `top-gray-3`.
 * @param  {String}  $property
 * @param  {String}  $alias
 * @param  {String}  $value
 * @param  {String}  $at-breakpoint
 */
@mixin u-property-directional($property, $alias, $value, $at-breakpoint: null) {
  $class-name: 'u-#{$property}';

  @if ($alias and str-length($alias) > 0) {
    $class-name: '#{$class-name}-#{$alias}';
  }

  $directions: ('vertical', 'horizontal', 'top', 'right', 'bottom', 'left');
  $direction: null;
  $temp-direction: $alias;

  // Check whether $alias starts with a direction
  $index: str-index($alias, '-');
  @if ($index) {
    $temp-direction: str-slice($alias, 1, $index - 1);
  }

  @each $x-direction in $directions {
    @if not $direction and $temp-direction == $x-direction {
      $direction: $x-direction;
    }
  }

  // Set properties based on direction
  @include breakpoints($class-name, $at-breakpoint) {
    @if ($direction == 'vertical') {
      #{$property}-top: #{$value};
      #{$property}-bottom: #{$value};
    } @else if ($direction == 'horizontal') {
      #{$property}-right: #{$value};
      #{$property}-left: #{$value};
    } @else if ($direction) {
      #{$property}-#{$direction}: #{$value};
    } @else {
      #{$property}: #{$value};
    }
  }
}

// Examples:

// @include u-property-directional('border', 'top', 1px solid $color-gray-3, 'sm');

/**
 * Generate fluid padding. padding: top left bottom right
 *
 * @param $top - single value or list (min px, max px)
 * @param $left - single value or list (min px, max px)
 * @param $bottom - single value or list (min px, max px)
 * @param $right - single value or list (min px, max px)
 */
@mixin fluid-padding($top, $left, $bottom, $right) {//, $left, $bottom, $right

  $top-val: $top;
  @if type-of($top) == 'list' {
    $top-val: fluid(list.nth($top, 1), list.nth($top, 2));
  }

  $left-val: $left;
  @if type-of($left) == 'list' {
    $left-val: fluid(list.nth($left, 1), list.nth($left, 2));
  }

  $bottom-val: $bottom;
  @if type-of($bottom) == 'list' {
    $bottom-val: fluid(list.nth($bottom, 1), list.nth($bottom, 2));
  }

  $right-val: $right;
  @if type-of($right) == 'list' {
    $right-val: fluid(list.nth($right, 1), list.nth($right, 2));
  }

  padding: $top-val $left-val $bottom-val $right-val;
}

/**
 * Generate fluid margin. padding: top left bottom right
 *
 * @param $top - single value or list (min px, max px)
 * @param $left - single value or list (min px, max px)
 * @param $bottom - single value or list (min px, max px)
 * @param $right - single value or list (min px, max px)
 */
@mixin fluid-margin($top, $left, $bottom, $right) {//, $left, $bottom, $right

  $top-val: $top;
  @if type-of($top) == 'list' {
    $top-val: fluid(list.nth($top, 1), list.nth($top, 2));
  }

  $left-val: $left;
  @if type-of($left) == 'list' {
    $left-val: fluid(list.nth($left, 1), list.nth($left, 2));
  }

  $bottom-val: $bottom;
  @if type-of($bottom) == 'list' {
    $bottom-val: fluid(list.nth($bottom, 1), list.nth($bottom, 2));
  }

  $right-val: $right;
  @if type-of($right) == 'list' {
    $right-val: fluid(list.nth($right, 1), list.nth($right, 2));
  }

  margin: $top-val $left-val $bottom-val $right-val;
}

/**
 * Generate fluid spacing. padding: top left bottom right
 *
 * @param $top - single value or list (min px, max px)
 * @param $left - single value or list (min px, max px)
 * @param $bottom - single value or list (min px, max px)
 * @param $right - single value or list (min px, max px)
 */
// @mixin fluid-spacing($props) {
//   // We iterate over each property of the defaultMap
//   @each $prop, $value in $props {
//     @if type-of($value) == 'list' {
//       @if list.length($value) == 1 {
//         #{$prop}: list.nth($value, 1);
//       } @else {
//         #{$prop}: fluid(list.nth($value, 1), list.nth($value, 2));
//       }
//     } @else {
//       #{$prop}: $value;
//     }
//   }
// }

/**
 * Generate a fluid property class. e.g u-padding-top-sm
 *
 * @param $property - e.g margin-top, padding-bottom
 * @param $alias - simple string indicating the size. e.g sm, lg
 * @param $value - list (min px, max px)
 * @param $bp-min - min breakpoint
 * @param $bp-max - max-breakpoint
 */
@mixin fluid-property($property, $alias, $value, $bp-min: $breakpoint-min, $bp-max: $breakpoint-max) {
  $class-name: escape-selector('u-#{$property}-#{$alias}');
  .#{$class-name} {
    #{$property}: fluid(list.nth($value, 1), list.nth($value, 2), $bp-min, $bp-max);
  }
}


@mixin fluid-property-directional($property, $alias, $value, $bp-min: $breakpoint-min, $bp-max: $breakpoint-max, $at-breakpoint: null) {
  $class-name: 'u-fliud-#{$property}';

  @if ($alias and str-length($alias) > 0) {
    $class-name: '#{$class-name}-#{$alias}';
  }

  $directions: ('vertical', 'horizontal', 'top', 'right', 'bottom', 'left');
  $direction: null;
  $temp-direction: $alias;

  // Check whether $alias starts with a direction
  $index: str-index($alias, '-');
  @if ($index) {
    $temp-direction: str-slice($alias, 1, $index - 1);
  }

  @each $x-direction in $directions {
    @if not $direction and $temp-direction == $x-direction {
      $direction: $x-direction;
    }
  }

  // Set properties based on direction
  @include breakpoints($class-name, $at-breakpoint) {
    @if ($direction == 'vertical') {
      #{$property}-top: fluid(list.nth($value, 1), list.nth($value, 2), $bp-min, $bp-max);
      #{$property}-bottom: fluid(list.nth($value, 1), list.nth($value, 2), $bp-min, $bp-max);
    } @else if ($direction == 'horizontal') {
      #{$property}-right: fluid(list.nth($value, 1), list.nth($value, 2), $bp-min, $bp-max);
      #{$property}-left: fluid(list.nth($value, 1), list.nth($value, 2), $bp-min, $bp-max);
    } @else if ($direction) {
      #{$property}-#{$direction}: fluid(list.nth($value, 1), list.nth($value, 2), $bp-min, $bp-max);
    } @else {
      #{$property}: fluid(list.nth($value, 1), list.nth($value, 2), $bp-min, $bp-max);
    }
  }
}
