/**
 * Add new breakpoint alias.
 * @see http://oddbird.net/2013/10/19/map-merge
 * @see https://github.com/sass/sass/issues/1511#issuecomment-61907897
 *
 * Example:
 * `@include add-breakpoint('sidebar', 60em);`
 *
 * @param  {String}  $alias
 * @param  {Number}  $value
 * @return {Boolean}
 */
@mixin add-breakpoint($alias, $value) {
  $breakpoints: map-merge($breakpoints, ($alias: $value)) !global;
}

/**
 * Generate media queries based on a map of `$breakpoints`. Defaults to
 * mobile-first, min-width queries.
 *
 * Allows quick prefixes to modify breakpoints:
 * - `lt-`: Desktop-first, max-width queries (automatically removes 1px to avoid query overlap)
 * - `btwn-`: Between min- and max-width queries
 *
 * Based on Inuit's responsive tools:
 * @see https://github.com/inuitcss/settings.responsive/blob/master/_settings.responsive.scss
 * @see https://github.com/inuitcss/tools.responsive/blob/master/_tools.responsive.scss
 *
 * And Sass MQ:
 * @see https://github.com/sass-mq/sass-mq
 *
 * @note `$breakpoints` is defined in `resources/assets/sass/settings/_breakpoints.scss`
 *
 * @param  {String}  $breakpoint-name
 */
@mixin mq($alias) {
  $prefixes: ('lt-', 'btwn-');
  $prefix: null;
  $temp-prefix: $alias;

  // Check whether $alias starts with a prefix
  $index: str-index($alias, '-');
  @if ($index) {
    $temp-prefix: str-slice($alias, 1, $index);
  }

  @each $x-prefix in $prefixes {
    @if not $prefix and $temp-prefix == $x-prefix {
      $prefix: $x-prefix;
    }
  }

  // Strip $prefix from $alias
  @if $prefix {
    $alias: str-slice($alias, str-length($prefix) + 1);
  }

  // Build media query
  $breakpoint: map-get($breakpoints, $alias);

  // Default: Mobile-first, min-width queries
  $media-query: '(min-width: #{$breakpoint})';

  // `lt-`: Desktop-first, max-width queries
  @if $prefix == 'lt-' {
    $media-query: '(max-width: #{get-max-width-breakpoint($breakpoint)})';
  }

  // `btwn-`: Between min- and max-width queries
  @else if $prefix == 'btwn-' {
    $alias-parts: explode($alias, '-and-');
    $min-breakpoint: map-get($breakpoints, nth($alias-parts, 1));
    $max-breakpoint: map-get($breakpoints, nth($alias-parts, 2));
    $media-query: '(min-width: #{$min-breakpoint}) and (max-width: #{get-max-width-breakpoint($max-breakpoint)})';
  }

  @media all and #{$media-query} {
    @content;
  }
}

/**
 * Mixin to generate breakpoint-specific classes.
 * @param  {String}  $alias
 * @param  {String}  $at-breakpoint
 */
@mixin breakpoints($class-name, $at-breakpoint: null) {
  @if ($at-breakpoint) {
    @include mq($at-breakpoint) {
      $class-name: escape-selector($class-name);
      $at-breakpoint: escape-selector($at-breakpoint);
      .#{$class-name}\@#{$at-breakpoint} {
        @content;
      }
    }
  } @else {
    $class-name: escape-selector($class-name);
    .#{$class-name} {
      @content;
    }
  }
}
