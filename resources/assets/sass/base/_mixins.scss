/**
 * Generic property utilities.
 * @param  {String}  $property
 * @param  {String}  $alias
 * @param  {String}  $value
 * @param  {String}  $at-breakpoint
 */
@mixin u-property($property, $alias, $value, $at-breakpoint: null) {
  $class-name: 'u-#{$property}-#{$alias}';
  @include breakpoints($class-name, $at-breakpoint) {
    #{$property}: #{$value};
  }
}

// Examples:

// NOTE: Keep breakpoint modifiers below defaults so they always override them
// @include u-property('flex-wrap', 'nowrap', 'nowrap', 'lt-md');



/**
 * Directional property utilities.
 * @param  {String}  $property
 * @param  {String}  $alias
 * @param  {String}  $value
 * @param  {String}  $at-breakpoint
 */
@mixin u-property-directional($property, $alias, $value, $at-breakpoint: null) {
  // Vars
  $class-name: 'u-#{$property}';
  $directions: (
    'vertical',
    'horizontal',
    'top',
    'right',
    'bottom',
    'left'
  );
  $direction: null;



  $alias-parts: explode($alias, '-');

  @if (not $alias) {

    // ?

  // If alias has 1 part, then it's either a direction or an alias
  // (Could be direction if alias is blank; meant to be the default value)
  } @else if (length($alias-parts) == 1) {
    @each $temp-direction in $directions {
      @if not $direction and $temp-direction == nth($alias-parts, 1) {
        $direction: $temp-direction;
      }
    }
    @if not $direction {
      $alias: nth($alias-parts, 1);
    } @else {
      $alias: '';
    }
  // If alias is 2 parts, then first is direction and second is alias
  } @else if (length($alias-parts) == 2) {
    $direction: nth($alias-parts, 1);
    $alias: nth($alias-parts, 2);
  }



  // Update class name
  @if ($direction and str-length($direction) > 0) {
    $class-name: '#{$class-name}-#{$direction}';
  }
  // If alias was given, append it to the default class name
  @if ($alias and str-length($alias) > 0) {
    $class-name: '#{$class-name}-#{$alias}';
  }



  @include breakpoints($class-name, $at-breakpoint) {
    @if ($direction == 'vertical') {
      #{$property}-top: #{$value};
      #{$property}-bottom: #{$value};
    } @else if ($direction == 'horizontal') {
      #{$property}-right: #{$value};
      #{$property}-left: #{$value};
    } @else if ($direction) {
      #{$property}-#{$direction}: #{$value};
    } @else {
      #{$property}: #{$value};
    }
  }
}

// Examples:

// NOTE: Keep breakpoint modifiers below defaults so they always override them
// @include u-property-directional('padding', 'horizontal', $gutter);



/**
 * Clear floated elements.
 */
@mixin clearfix {
  &::before,
  &::after {
    display: table;
    content: '';
  }
  &::after {
    clear: both;
  }
}

/**
 * Accessible hover styles. Applies :hover styles to :focus and :active.
 * http://24ways.org/2007/css-for-accessibility
 */
@mixin hover($active-classes...) {
  &:hover,
  &:focus,
  &:active {
    @content;
  }

  // Allow multiple, configurable classes
  @if (length($active-classes) > 0) {
    @each $class in $active-classes {
      &.#{$class} {
        @content;
      }
    }
  }
}

/**
 * Keep an element invisible until an active class is added to it.
 * @param  {String}  $active-class
 */
@mixin invisible-until-active($active-class: 'is-active') {
  transition: opacity 500ms ease,
    visibility 500ms linear 0s;
  opacity: 0;
  visibility: hidden;
  pointer-events: none;

  &.#{$active-class} {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  }
}

/**
 * Input placeholders
 * Based on https://github.com/twbs/bootstrap/blob/c04aa41ee2744b769be38526bbdef11e5be9421b/less/mixins/vendor-prefixes.less#L100-L109
 */
@mixin placeholder {
  // scss-lint:disable VendorPrefix
  // Firefox
  &::-moz-placeholder {
    @content;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
    opacity: 1;
  }
  // Internet Explorer 10+
  &:-ms-input-placeholder {
    @content;
  }
  // Safari and Chrome
  &::-webkit-input-placeholder {
    @content;
  }
  // scss-lint:enable VendorPrefix
}

/**
 * Polyfill object-fit and object-position.
 * https://github.com/bfred-it/object-fit-images
 * @param  {String}  $value
 */
@mixin object-fit($value: 'cover') {
  object-fit: #{$value};
  font-family: 'object-fit: #{$value};';
}

/**
 * Scrolling
 */
@mixin scroll-disabled {
  overflow: hidden;
  -webkit-overflow-scrolling: auto;
}
@mixin scroll {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
}

/**
 * Hide only visually, but have it available for screen readers:
 * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);
}
