@use "sass:math";

// ------------------------------
// Required Variables
// ------------------------------

$font-size: 16 !default; // Define in `settings/typography`



// ------------------------------
// Strings
// ------------------------------

/**
 * Escape special characters in a selector.
 * @param  {String}  $pixels
 * @return {String}
 */
@function escape-selector($selector) {
  $selector: to-string($selector);
  $selector: str-replace($selector, '"', '');
  $selector: str-replace($selector, '.', '\\.');
  $selector: str-replace($selector, '%', '\\%');
  $selector: str-replace($selector, '/', '\\\/');

  // TODO: Invalid characters?
  // $selector: str-replace($selector, '@', '\\@');
  // $selector: str-replace($selector, '(', '\\(');
  // $selector: str-replace($selector, ')', '\\)');

  @return $selector;
}



// ------------------------------
// Units
// ------------------------------

/**
 * Remove the unit of a length
 * @see https://hugogiraudel.com/2013/08/12/sass-functions/
 * @param  {Number}  $value  Number to remove unit from
 * @return {Number}          Unitless number
 */
@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

/**
 * Convert px values (e.g. from a PSD) to ems.
 * @see https://viljamis.com/blog/2013/prototyping-responsive-typography/
 * @param  {Number}  $pixels
 * @param  {Number}  $context  Defaults to $font-size
 * @return {Number}            em value
 */
@function em($pixels, $context: $font-size) {
  // Note: `strip-units` is what's causing the invalid multiplication errors. Possible to fix?
  // @return strip-units($pixels) / strip-units($context) * 1em;
  @return math.div(strip-unit($pixels), strip-unit($context)) * 1em;
}

/**
 * Convert px values (e.g. from a PSD) to rems.
 * @see https://viljamis.com/blog/2013/prototyping-responsive-typography/
 * @param  {Number}  $pixels
 * @return {Number}           rem value
 */
@function rem($pixels) {
  // Note: `strip-units` is what's causing the invalid multiplication errors. Possible to fix?
  // @return strip-units($pixels) / strip-units($font-size) * 1rem;
  @return math.div(strip-unit($pixels), strip-unit($font-size)) * 1rem;
}

@function em2px($em) {
  @return strip-unit($em) * strip-unit($font-size);
}

// ------------------------------
// Responsive
// ------------------------------

/**
 * Subtract 1px from breakpoint so min/max queries don't overlap.
 * @todo Use 0.01em instead of 1px to avoid media query "void" when text zoom is on.
 * @see https://github.com/sass-mq/sass-mq/issues/6
 * @param  {Number}  $breakpoint
 * @return {Number}
 */
@function get-max-width-breakpoint($breakpoint) {
  @if type-of($breakpoint) != 'number' {
    @error '"#{$breakpoint}" should be a number value.';
  } @else if unit($breakpoint) == 'em' {
    $breakpoint: $breakpoint - 0.0625em; // 1px = 1em / 16
  } @else if unit($breakpoint) == 'px' {
    $breakpoint: $breakpoint - 1px;
  } @else {
    @error '#{$breakpoint} should be either em or px.';
  }

  @return $breakpoint;
}


// ------------------------------
// Typography
// ------------------------------

/**
 * Convert tracking (e.g. from a PSD) to ems for letter-spacing.
 * @param  {Number}  $tracking
 * @return {Number}             em value
 */
@function tracking($tracking) {
  @return math.div($tracking, 1000) * 1em;
}

/**
 * Convert px letter spacing to em based on font size
 */
@function letter-spacing($spacing-px, $font-size: $font-size) {
  @return math.div($spacing-px, $font-size) * 1em;
}

/**
 * Convert line height to unit relative to the font size
 * @param % or px value
 */
@function line-height($value, $font-size: $font-size) {
  @if unit($value) == '%' {
    @return math.div(strip-unit($value), 100);
  }

  @if unit($value) == 'px' {
    @return math.div($value, $font-size);
  }

  @return $value;
}

@function scaler-vw($size-max, $size-min, $bp-min: $breakpoint-min, $bp-max: $breakpoint-max) {
  @return (100 * math.div(($size-max - $size-min), ($bp-max - $bp-min))) * 1vw;
}

@function scaler-rem($size-max, $size-min, $bp-min: $breakpoint-min, $bp-max: $breakpoint-max) {
  @return rem(math.div(($bp-min * $size-max - $bp-max * $size-min), ($bp-min - $bp-max)));
}

/**
 * Uses clamp to set a fluid valid with min/max values using clamp()
 * By default, this uses $breakpoint-min and $breakpoint-max
 *
 * @param px value min
 * @param px value max at design size
 * @param bp-min
 * @param bp-max
 *
 */
 @function fluid($size-min, $size-max-at-design, $bp-min: $breakpoint-min, $bp-max: $breakpoint-max) {
  $min-rem: rem($size-min);

  // Find the ratio at the design size and calculate the size for our max breakpoint
  $design-size-max-ratio: strip-unit(math.div($design-size-max, $design-size));

  // Adjust the max value to scale up to the design size max
  $size-max: floor($size-max-at-design * $design-size-max-ratio);
  $max-rem: rem($size-max);

  @return clamp(
    #{$min-rem},
    #{scaler-vw($size-max, $size-max-at-design, $bp-min, $bp-max)} + #{scaler-rem($size-max-at-design, $size-min, $bp-min, $bp-max)},
    #{$max-rem}
  )
}
